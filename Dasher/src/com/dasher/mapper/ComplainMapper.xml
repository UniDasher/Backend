<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dasher.mapper.ComplainMapper">
   <resultMap type="Complain" id="complainMap">
      <result property="id" column="id"/>
      <result property="comId" column="comId"/>
      <result property="comType" column="comType"/>
      <result property="uid" column="uid"/>
      <result property="mid" column="mid"/>
      <result property="wid" column="wid"/>
      <result property="mid" column="mid"/>
      <result property="type" column="type"/>
      <result property="comResult" column="comResult"/>
      <result property="comContent" column="comContent"/>
      <result property="returnMoney" column="returnMoney"/>
      <result property="deductMoney" column="deductMoney"/>
      <result property="createBy" column="createBy"/>
      <result property="createDate" column="createDate"/>
      <result property="updateBy" column="updateBy"/>
      <result property="updateDate" column="updateDate"/>
      <result property="status" column="status"/>
   </resultMap>
   
   <insert id="add" useGeneratedKeys="true" keyProperty="id" parameterType="Complain">
     insert into complain(comId,comType,uid,mid,type,wid,content,createBy,createDate,status)
     values(#{comId},#{comType},#{uid},#{mid},#{type},#{wid},#{content},#{createBy},#{createDate},1)
   </insert>
   
   <select id="userComList" resultType="Complain">
     select c.*,CONCAT(u.firstName,u.lastName) as userName,u.mobilePhone as userPhone,
     CONCAT(w.firstName,w.lastName) as waiterName,w.mobilePhone as waiterPhone
	 from complain c
	 join user_info u
	 on c.uid=u.uid 
	 left join user_info w
	 on c.wid=w.uid
	 <!--join menu m
	 on c.mid=m.mid  -->
	 where c.status=#{status}
	 order by c.createDate desc
   </select>
   
   <select id="getByComId" parameterType="String" resultType="Complain">
     select c.*,CONCAT(u.firstName,u.lastName) as userName,u.mobilePhone as userPhone,
     m.status as menuStatus,m.dishsMoney,m.carriageMoney,
     CONCAT(w.firstName,w.lastName) as waiterName,w.mobilePhone as waiterPhone
	 from complain c
	 left join user_info u
	 on c.uid=u.uid
	 left join user_info w
	 on c.wid=w.uid
	 <if test="type==1">
	 	left join menu m
	 	on c.mid=m.mid 
	 </if>
	 <if test="type==2">
	 	left join market_menu m
	 	on c.mid=m.mid 
	 </if>
	 where c.comId=#{comId}
   </select>
   
   <select id="getCount" resultType="Integer" parameterType="Integer">
     select count(c.id)
     from complain c
	 left join user_info u 
	 on c.uid=u.uid
	 where c.status=#{status}
	 <if test="status==2 and searchStr!=''">
	 	and (u.firstName like CONCAT(CONCAT('%', #{searchStr}),'%') or u.lastName like CONCAT(CONCAT('%', #{searchStr}),'%'))
	 </if>
	 <if test="status==2 and startDate!='' and endDate!=''">
		and c.updateDate between #{startDate} and #{endDate}
     </if>
	 
   </select>
   
   <select id="list" resultType="Complain">
     select c.*,CONCAT(u.firstName,u.lastName) as userName,u.mobilePhone as userPhone,
     CONCAT(w.firstName,w.lastName) as waiterName,w.mobilePhone as waiterPhone
	 from complain c
	 left join user_info u
	 on c.uid=u.uid 
	 left join user_info w
	 on c.wid=w.uid
	 <!-- left join menu m
	 on c.mid=m.mid -->
	 where c.status=#{status}
	 <if test="status==2 and searchStr!=''">
	 	and (u.firstName like CONCAT(CONCAT('%', #{searchStr}),'%') or u.lastName like CONCAT(CONCAT('%', #{searchStr}),'%'))
	 </if>
	 <if test="status==2 and startDate!='' and endDate!=''">
		and c.updateDate between #{startDate} and #{endDate}
     </if>
	 <if test="status==2">
	 	order by c.updateDate desc limit #{startRow},#{pageSize} 
	 </if>
	 <if test="status==1">
	 	order by c.createDate desc
	 </if>
   </select>
   
   <update id="handle" parameterType="Complain">
     update complain 
     set comResult=#{comResult},comContent=#{comContent},returnMoney=#{returnMoney},
     	deductMoney=#{deductMoney},updateBy=#{updateBy},updateDate=#{updateDate},status=#{status}
     where comId=#{comId} 
   </update>
</mapper>
